/*
 * This source file was generated by the Gradle 'init' task
 */
package lab7;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Scanner;

import heap.Heap;
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Hashtable;
import java.util.PriorityQueue;

public class Huffman {

    public static void main(String[] args) throws FileNotFoundException{
        Heap heap = new Heap();
        HashMap<Character, Integer> table = new HashMap<Character, Integer>();
        File file = new File(args[0]);
        if(file == null){
            throw new FileNotFoundException();
        }
        Scanner sc = new Scanner(file);
        try {
            sc = new Scanner(file);
        } catch (FileNotFoundException e) {
            System.out.println("File not Found");
        }

        countFrequencies(sc, table);
    }

    public static void countFrequencies(Scanner sc, HashMap table){
        String line;
        while(sc.hasNextLine()){
            line = sc.nextLine();
            for(int i = 0; i < line.length(); i++){
                if(!table.containsKey(line.charAt(i))){
                    table.put(line.charAt(i), 1);
                    System.out.println(line.charAt(i) + "" + table.get((Character)line.charAt(i)));
                }
                else{
                    System.out.println(table.get(line.charAt(i)));
                    int e = (int)(table.get(line.charAt(i))) + 1;
                    table.put(line.charAt(i), e);
                }
            }



        
        }
    }

    public void buildTree(HashMap<K,V> map) { //table is a placeholder
        PriorityQueue q = new PriorityQueue<>();
        for (Object object : q) {
            
        }


        
    }

    //node starts as 0
    public String decode(String bitstring, int node, Heap heap) {
        if (bitstring.length() < 0) {
            return "";
        }
        if (heap.get(node*2+2) == null && heap.get(node*2+2) == null) {
                    //should be a character                //restarts at root
                return heap.get(node) + decode(bitstring.substring(1, bitstring.length()), 0, heap);
            }
        if (bitstring.charAt(0) == '1') {
            return "" + decode(bitstring.substring(1, bitstring.length()), node*2+2, heap);
        } else {
            return "" + decode(bitstring.substring(1, bitstring.length(), node*2+1), heap);
        }
    }
}
