/*
 * This source file was generated by the Gradle 'init' task
 */
package lab7;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Scanner;

import heap.Heap;

public class Huffman {

    public static void main(String[] args) throws FileNotFoundException{
        Heap heap = new Heap();
        Map<Character, Integer> table = new HashMap<>();
        File file = new File(args[0]);
        if(file == null){
            throw new FileNotFoundException();
        }
        Scanner sc = new Scanner(file);
        try {
            sc = new Scanner(file);
        } catch (FileNotFoundException e) {
            System.out.println("File not Found");
        }

        String input = countFrequencies(sc, table);

        Node tree = buildTree(table);

        Map<Character, String> encodeMap = new HashMap<>();
        makeEncodeMap(tree, encodeMap);

        String encoded = encode(tree, input);
        if(input.length() < 100){
            System.out.println("Input string: " + input);
            System.out.println("Encoded String: " + encoded);
            System.out.println("Decoded string: ");
        }
    }

    //counts the frequencies of characters and builds the input string that could be printed in main
    public static String countFrequencies(Scanner sc, Map<Character, Integer> table){
        String line;
        String total = "";
        while(sc.hasNextLine()){
            line = sc.nextLine();
            for(int i = 0; i < line.length(); i++){
                if(!table.containsKey(line.charAt(i))){
                    table.put(line.charAt(i), 1);
                }
                else{
                    int e = (int)(table.get(line.charAt(i))) + 1;
                    table.put(line.charAt(i), e);
                }
            }
            total += line;
        }
        return total;
    }

    public static Node buildTree(Map<Character,Integer> map) { //table is a placeholder
        PriorityQueue<Node> q = new PriorityQueue<>();
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            q.add(new Node(entry.getValue(), entry.getKey()));
        }

        while(q.size() != 1){
            Node left = q.poll();
            Node right = q.poll();
            Node tip = new Node(left.frequency + right.frequency, right.letterCount+left.letterCount);
            if(left.compareTo(right) == 0){
                if(left.letter != null || right.letter != null){
                    if(left.letterCount <= right.letterCount){
                        tip.setLeft(left);
                        tip.setRight(right);
                    }else{
                        tip.setLeft(right);
                        tip.setRight(left);
                    }
                }
                else if(left.letter.compareTo(right.letter) < 0){
                    tip.setLeft(left);
                    tip.setRight(right);
                }
                else{
                    tip.setLeft(right);
                    tip.setRight(left);
                }
            }
            else if(left.compareTo(right) == 1){
                tip.setLeft(right);
                tip.setRight(left);
            }
            else{
                tip.setLeft(left);
                tip.setRight(right);
            }
            q.add(tip);
        }
        return q.poll();
    }

    public static void makeEncodeMap(Node root, Map<Character,String> map){
        if(root == null || !map.isEmpty()){
            System.out.println("hit");
            return;
        }
        else if (root.letter == null) {
            
            makeEncodeMap(root.right, map, "1");
            makeEncodeMap(root.left, map, "0");
        }
        else{
            map.put(root.letter, "");
        }
    }

    public static void makeEncodeMap(Node root, Map<Character,String> map, String path){
        
        if(root == null){
            return;
        }
        else if (root.letter == null) {
            makeEncodeMap(root.right, map, path + "1");
            makeEncodeMap(root.left, map, path + "0");
        }
        else{
            map.put(root.letter, path);
        }
    }

    public static String encode(Node tree, String plain){
        Map<Character,String> map = new HashMap<>();
        makeEncodeMap(tree, map);
        String cypher = "";

        for(int i = 0; i < plain.length(); i++){
            cypher += map.get(plain.charAt(i));
        }

        return cypher;
    }
}
